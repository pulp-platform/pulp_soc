// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module soc_ctrl_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 8
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output soc_ctrl_reg_pkg::soc_ctrl_reg2hw_t reg2hw, // Write
  input  soc_ctrl_reg_pkg::soc_ctrl_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import soc_ctrl_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [15:0] info_nclusters_qs;
  logic info_nclusters_re;
  logic [15:0] info_ncores_qs;
  logic info_ncores_re;
  logic [31:0] fc_bootaddr_qs;
  logic [31:0] fc_bootaddr_wd;
  logic fc_bootaddr_we;
  logic fc_fetch_en_qs;
  logic fc_fetch_en_wd;
  logic fc_fetch_en_we;
  logic [15:0] soc_info_version_qs;
  logic soc_info_version_re;
  logic [2:0] soc_info_core_type_qs;
  logic soc_info_core_type_re;
  logic soc_info_fpu_present_qs;
  logic soc_info_fpu_present_re;
  logic soc_info_zfinx_qs;
  logic soc_info_zfinx_re;
  logic soc_info_hwpe_present_qs;
  logic soc_info_hwpe_present_re;
  logic [31:0] gp_testreg_0_qs;
  logic [31:0] gp_testreg_0_wd;
  logic gp_testreg_0_we;
  logic [31:0] gp_testreg_1_qs;
  logic [31:0] gp_testreg_1_wd;
  logic gp_testreg_1_we;
  logic [31:0] gp_testreg_2_qs;
  logic [31:0] gp_testreg_2_wd;
  logic gp_testreg_2_we;
  logic [31:0] gp_testreg_3_qs;
  logic [31:0] gp_testreg_3_wd;
  logic gp_testreg_3_we;
  logic cluster_ctrl_qs;
  logic cluster_ctrl_wd;
  logic cluster_ctrl_we;
  logic [7:0] jtagreg_confreg_out_wd;
  logic jtagreg_confreg_out_we;
  logic [7:0] jtagreg_confreg_in_qs;
  logic [30:0] corestatus_exit_code_qs;
  logic [30:0] corestatus_exit_code_wd;
  logic corestatus_exit_code_we;
  logic corestatus_eoc_qs;
  logic corestatus_eoc_wd;
  logic corestatus_eoc_we;
  logic [30:0] corestatus_read_only_exit_code_qs;
  logic corestatus_read_only_exit_code_re;
  logic corestatus_read_only_eoc_qs;
  logic corestatus_read_only_eoc_re;
  logic [1:0] bootsel_qs;
  logic bootsel_re;
  logic clksel_qs;
  logic clksel_re;

  // Register instances
  // R[info]: V(True)

  //   F[nclusters]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_info_nclusters (
    .re     (info_nclusters_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.info.nclusters.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (info_nclusters_qs)
  );


  //   F[ncores]: 31:16
  prim_subreg_ext #(
    .DW    (16)
  ) u_info_ncores (
    .re     (info_ncores_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.info.ncores.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (info_ncores_qs)
  );


  // R[fc_bootaddr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h1a000080)
  ) u_fc_bootaddr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (fc_bootaddr_we),
    .wd     (fc_bootaddr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fc_bootaddr.q ),

    // to register interface (read)
    .qs     (fc_bootaddr_qs)
  );


  // R[fc_fetch_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_fc_fetch_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (fc_fetch_en_we),
    .wd     (fc_fetch_en_wd),

    // from internal hardware
    .de     (hw2reg.fc_fetch_en.de),
    .d      (hw2reg.fc_fetch_en.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.fc_fetch_en.q ),

    // to register interface (read)
    .qs     (fc_fetch_en_qs)
  );


  // R[soc_info]: V(True)

  //   F[version]: 15:0
  prim_subreg_ext #(
    .DW    (16)
  ) u_soc_info_version (
    .re     (soc_info_version_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.soc_info.version.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (soc_info_version_qs)
  );


  //   F[core_type]: 18:16
  prim_subreg_ext #(
    .DW    (3)
  ) u_soc_info_core_type (
    .re     (soc_info_core_type_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.soc_info.core_type.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (soc_info_core_type_qs)
  );


  //   F[fpu_present]: 19:19
  prim_subreg_ext #(
    .DW    (1)
  ) u_soc_info_fpu_present (
    .re     (soc_info_fpu_present_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.soc_info.fpu_present.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (soc_info_fpu_present_qs)
  );


  //   F[zfinx]: 20:20
  prim_subreg_ext #(
    .DW    (1)
  ) u_soc_info_zfinx (
    .re     (soc_info_zfinx_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.soc_info.zfinx.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (soc_info_zfinx_qs)
  );


  //   F[hwpe_present]: 21:21
  prim_subreg_ext #(
    .DW    (1)
  ) u_soc_info_hwpe_present (
    .re     (soc_info_hwpe_present_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.soc_info.hwpe_present.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (soc_info_hwpe_present_qs)
  );



  // Subregister 0 of Multireg gp_testreg
  // R[gp_testreg_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gp_testreg_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gp_testreg_0_we),
    .wd     (gp_testreg_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gp_testreg_0_qs)
  );

  // Subregister 1 of Multireg gp_testreg
  // R[gp_testreg_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gp_testreg_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gp_testreg_1_we),
    .wd     (gp_testreg_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gp_testreg_1_qs)
  );

  // Subregister 2 of Multireg gp_testreg
  // R[gp_testreg_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gp_testreg_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gp_testreg_2_we),
    .wd     (gp_testreg_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gp_testreg_2_qs)
  );

  // Subregister 3 of Multireg gp_testreg
  // R[gp_testreg_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_gp_testreg_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (gp_testreg_3_we),
    .wd     (gp_testreg_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (gp_testreg_3_qs)
  );


  // R[cluster_ctrl]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_cluster_ctrl (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (cluster_ctrl_we),
    .wd     (cluster_ctrl_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.cluster_ctrl.q ),

    // to register interface (read)
    .qs     (cluster_ctrl_qs)
  );


  // R[jtagreg]: V(False)

  //   F[confreg_out]: 7:0
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_jtagreg_confreg_out (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jtagreg_confreg_out_we),
    .wd     (jtagreg_confreg_out_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.jtagreg.confreg_out.q ),

    .qs     ()
  );


  //   F[confreg_in]: 15:8
  prim_subreg #(
    .DW      (8),
    .SWACCESS("RO"),
    .RESVAL  (8'h0)
  ) u_jtagreg_confreg_in (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.jtagreg.confreg_in.de),
    .d      (hw2reg.jtagreg.confreg_in.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (jtagreg_confreg_in_qs)
  );


  // R[corestatus]: V(False)

  //   F[exit_code]: 30:0
  prim_subreg #(
    .DW      (31),
    .SWACCESS("RW"),
    .RESVAL  (31'h0)
  ) u_corestatus_exit_code (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (corestatus_exit_code_we),
    .wd     (corestatus_exit_code_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.corestatus.exit_code.q ),

    // to register interface (read)
    .qs     (corestatus_exit_code_qs)
  );


  //   F[eoc]: 31:31
  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_corestatus_eoc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (corestatus_eoc_we),
    .wd     (corestatus_eoc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.corestatus.eoc.q ),

    // to register interface (read)
    .qs     (corestatus_eoc_qs)
  );


  // R[corestatus_read_only]: V(True)

  //   F[exit_code]: 30:0
  prim_subreg_ext #(
    .DW    (31)
  ) u_corestatus_read_only_exit_code (
    .re     (corestatus_read_only_exit_code_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.corestatus_read_only.exit_code.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (corestatus_read_only_exit_code_qs)
  );


  //   F[eoc]: 31:31
  prim_subreg_ext #(
    .DW    (1)
  ) u_corestatus_read_only_eoc (
    .re     (corestatus_read_only_eoc_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.corestatus_read_only.eoc.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (corestatus_read_only_eoc_qs)
  );


  // R[bootsel]: V(True)

  prim_subreg_ext #(
    .DW    (2)
  ) u_bootsel (
    .re     (bootsel_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.bootsel.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (bootsel_qs)
  );


  // R[clksel]: V(True)

  prim_subreg_ext #(
    .DW    (1)
  ) u_clksel (
    .re     (clksel_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.clksel.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (clksel_qs)
  );




  logic [13:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == SOC_CTRL_INFO_OFFSET);
    addr_hit[ 1] = (reg_addr == SOC_CTRL_FC_BOOTADDR_OFFSET);
    addr_hit[ 2] = (reg_addr == SOC_CTRL_FC_FETCH_EN_OFFSET);
    addr_hit[ 3] = (reg_addr == SOC_CTRL_SOC_INFO_OFFSET);
    addr_hit[ 4] = (reg_addr == SOC_CTRL_GP_TESTREG_0_OFFSET);
    addr_hit[ 5] = (reg_addr == SOC_CTRL_GP_TESTREG_1_OFFSET);
    addr_hit[ 6] = (reg_addr == SOC_CTRL_GP_TESTREG_2_OFFSET);
    addr_hit[ 7] = (reg_addr == SOC_CTRL_GP_TESTREG_3_OFFSET);
    addr_hit[ 8] = (reg_addr == SOC_CTRL_CLUSTER_CTRL_OFFSET);
    addr_hit[ 9] = (reg_addr == SOC_CTRL_JTAGREG_OFFSET);
    addr_hit[10] = (reg_addr == SOC_CTRL_CORESTATUS_OFFSET);
    addr_hit[11] = (reg_addr == SOC_CTRL_CORESTATUS_READ_ONLY_OFFSET);
    addr_hit[12] = (reg_addr == SOC_CTRL_BOOTSEL_OFFSET);
    addr_hit[13] = (reg_addr == SOC_CTRL_CLKSEL_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(SOC_CTRL_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(SOC_CTRL_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(SOC_CTRL_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(SOC_CTRL_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(SOC_CTRL_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(SOC_CTRL_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(SOC_CTRL_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(SOC_CTRL_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(SOC_CTRL_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(SOC_CTRL_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(SOC_CTRL_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(SOC_CTRL_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(SOC_CTRL_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(SOC_CTRL_PERMIT[13] & ~reg_be)))));
  end

  assign info_nclusters_re = addr_hit[0] & reg_re & !reg_error;

  assign info_ncores_re = addr_hit[0] & reg_re & !reg_error;

  assign fc_bootaddr_we = addr_hit[1] & reg_we & !reg_error;
  assign fc_bootaddr_wd = reg_wdata[31:0];

  assign fc_fetch_en_we = addr_hit[2] & reg_we & !reg_error;
  assign fc_fetch_en_wd = reg_wdata[1];

  assign soc_info_version_re = addr_hit[3] & reg_re & !reg_error;

  assign soc_info_core_type_re = addr_hit[3] & reg_re & !reg_error;

  assign soc_info_fpu_present_re = addr_hit[3] & reg_re & !reg_error;

  assign soc_info_zfinx_re = addr_hit[3] & reg_re & !reg_error;

  assign soc_info_hwpe_present_re = addr_hit[3] & reg_re & !reg_error;

  assign gp_testreg_0_we = addr_hit[4] & reg_we & !reg_error;
  assign gp_testreg_0_wd = reg_wdata[31:0];

  assign gp_testreg_1_we = addr_hit[5] & reg_we & !reg_error;
  assign gp_testreg_1_wd = reg_wdata[31:0];

  assign gp_testreg_2_we = addr_hit[6] & reg_we & !reg_error;
  assign gp_testreg_2_wd = reg_wdata[31:0];

  assign gp_testreg_3_we = addr_hit[7] & reg_we & !reg_error;
  assign gp_testreg_3_wd = reg_wdata[31:0];

  assign cluster_ctrl_we = addr_hit[8] & reg_we & !reg_error;
  assign cluster_ctrl_wd = reg_wdata[0];

  assign jtagreg_confreg_out_we = addr_hit[9] & reg_we & !reg_error;
  assign jtagreg_confreg_out_wd = reg_wdata[7:0];

  assign corestatus_exit_code_we = addr_hit[10] & reg_we & !reg_error;
  assign corestatus_exit_code_wd = reg_wdata[30:0];

  assign corestatus_eoc_we = addr_hit[10] & reg_we & !reg_error;
  assign corestatus_eoc_wd = reg_wdata[31];

  assign corestatus_read_only_exit_code_re = addr_hit[11] & reg_re & !reg_error;

  assign corestatus_read_only_eoc_re = addr_hit[11] & reg_re & !reg_error;

  assign bootsel_re = addr_hit[12] & reg_re & !reg_error;

  assign clksel_re = addr_hit[13] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[15:0] = info_nclusters_qs;
        reg_rdata_next[31:16] = info_ncores_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = fc_bootaddr_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[1] = fc_fetch_en_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[15:0] = soc_info_version_qs;
        reg_rdata_next[18:16] = soc_info_core_type_qs;
        reg_rdata_next[19] = soc_info_fpu_present_qs;
        reg_rdata_next[20] = soc_info_zfinx_qs;
        reg_rdata_next[21] = soc_info_hwpe_present_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = gp_testreg_0_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = gp_testreg_1_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = gp_testreg_2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = gp_testreg_3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = cluster_ctrl_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[7:0] = '0;
        reg_rdata_next[15:8] = jtagreg_confreg_in_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[30:0] = corestatus_exit_code_qs;
        reg_rdata_next[31] = corestatus_eoc_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[30:0] = corestatus_read_only_exit_code_qs;
        reg_rdata_next[31] = corestatus_read_only_eoc_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[1:0] = bootsel_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = clksel_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module soc_ctrl_reg_top_intf
#(
  parameter int AW = 8,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output soc_ctrl_reg_pkg::soc_ctrl_reg2hw_t reg2hw, // Write
  input  soc_ctrl_reg_pkg::soc_ctrl_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  soc_ctrl_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


