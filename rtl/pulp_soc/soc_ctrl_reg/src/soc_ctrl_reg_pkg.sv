// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package soc_ctrl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [31:0] q;
  } soc_ctrl_reg2hw_fc_bootaddr_reg_t;

  typedef struct packed {
    logic        q;
  } soc_ctrl_reg2hw_fc_fetch_en_reg_t;

  typedef struct packed {
    logic        q;
  } soc_ctrl_reg2hw_cluster_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  q;
    } confreg_out;
  } soc_ctrl_reg2hw_jtagreg_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] q;
    } exit_code;
    struct packed {
      logic        q;
    } eoc;
  } soc_ctrl_reg2hw_corestatus_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
    } nclusters;
    struct packed {
      logic [15:0] d;
    } ncores;
  } soc_ctrl_hw2reg_info_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } soc_ctrl_hw2reg_fc_fetch_en_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
    } version;
    struct packed {
      logic [2:0]  d;
    } core_type;
    struct packed {
      logic        d;
    } fpu_present;
    struct packed {
      logic        d;
    } zfinx;
    struct packed {
      logic        d;
    } hwpe_present;
  } soc_ctrl_hw2reg_soc_info_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
      logic        de;
    } confreg_in;
  } soc_ctrl_hw2reg_jtagreg_reg_t;

  typedef struct packed {
    struct packed {
      logic [30:0] d;
    } exit_code;
    struct packed {
      logic        d;
    } eoc;
  } soc_ctrl_hw2reg_corestatus_read_only_reg_t;

  typedef struct packed {
    logic [1:0]  d;
  } soc_ctrl_hw2reg_bootsel_reg_t;

  typedef struct packed {
    logic        d;
  } soc_ctrl_hw2reg_clksel_reg_t;

  // Register -> HW type
  typedef struct packed {
    soc_ctrl_reg2hw_fc_bootaddr_reg_t fc_bootaddr; // [73:42]
    soc_ctrl_reg2hw_fc_fetch_en_reg_t fc_fetch_en; // [41:41]
    soc_ctrl_reg2hw_cluster_ctrl_reg_t cluster_ctrl; // [40:40]
    soc_ctrl_reg2hw_jtagreg_reg_t jtagreg; // [39:32]
    soc_ctrl_reg2hw_corestatus_reg_t corestatus; // [31:0]
  } soc_ctrl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    soc_ctrl_hw2reg_info_reg_t info; // [99:68]
    soc_ctrl_hw2reg_fc_fetch_en_reg_t fc_fetch_en; // [67:66]
    soc_ctrl_hw2reg_soc_info_reg_t soc_info; // [65:44]
    soc_ctrl_hw2reg_jtagreg_reg_t jtagreg; // [43:35]
    soc_ctrl_hw2reg_corestatus_read_only_reg_t corestatus_read_only; // [34:3]
    soc_ctrl_hw2reg_bootsel_reg_t bootsel; // [2:1]
    soc_ctrl_hw2reg_clksel_reg_t clksel; // [0:0]
  } soc_ctrl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SOC_CTRL_INFO_OFFSET = 8'h 0;
  parameter logic [BlockAw-1:0] SOC_CTRL_FC_BOOTADDR_OFFSET = 8'h 4;
  parameter logic [BlockAw-1:0] SOC_CTRL_FC_FETCH_EN_OFFSET = 8'h 8;
  parameter logic [BlockAw-1:0] SOC_CTRL_SOC_INFO_OFFSET = 8'h c;
  parameter logic [BlockAw-1:0] SOC_CTRL_GP_TESTREG_0_OFFSET = 8'h 10;
  parameter logic [BlockAw-1:0] SOC_CTRL_GP_TESTREG_1_OFFSET = 8'h 14;
  parameter logic [BlockAw-1:0] SOC_CTRL_GP_TESTREG_2_OFFSET = 8'h 18;
  parameter logic [BlockAw-1:0] SOC_CTRL_GP_TESTREG_3_OFFSET = 8'h 1c;
  parameter logic [BlockAw-1:0] SOC_CTRL_CLUSTER_CTRL_OFFSET = 8'h 70;
  parameter logic [BlockAw-1:0] SOC_CTRL_JTAGREG_OFFSET = 8'h 74;
  parameter logic [BlockAw-1:0] SOC_CTRL_CORESTATUS_OFFSET = 8'h a0;
  parameter logic [BlockAw-1:0] SOC_CTRL_CORESTATUS_READ_ONLY_OFFSET = 8'h c0;
  parameter logic [BlockAw-1:0] SOC_CTRL_BOOTSEL_OFFSET = 8'h c4;
  parameter logic [BlockAw-1:0] SOC_CTRL_CLKSEL_OFFSET = 8'h c8;

  // Reset values for hwext registers and their fields
  parameter logic [31:0] SOC_CTRL_INFO_RESVAL = 32'h 0;
  parameter logic [21:0] SOC_CTRL_SOC_INFO_RESVAL = 22'h 5;
  parameter logic [15:0] SOC_CTRL_SOC_INFO_VERSION_RESVAL = 16'h 5;
  parameter logic [31:0] SOC_CTRL_CORESTATUS_READ_ONLY_RESVAL = 32'h 0;
  parameter logic [30:0] SOC_CTRL_CORESTATUS_READ_ONLY_EXIT_CODE_RESVAL = 31'h 0;
  parameter logic [0:0] SOC_CTRL_CORESTATUS_READ_ONLY_EOC_RESVAL = 1'h 0;
  parameter logic [1:0] SOC_CTRL_BOOTSEL_RESVAL = 2'h 0;
  parameter logic [0:0] SOC_CTRL_CLKSEL_RESVAL = 1'h 0;

  // Register index
  typedef enum int {
    SOC_CTRL_INFO,
    SOC_CTRL_FC_BOOTADDR,
    SOC_CTRL_FC_FETCH_EN,
    SOC_CTRL_SOC_INFO,
    SOC_CTRL_GP_TESTREG_0,
    SOC_CTRL_GP_TESTREG_1,
    SOC_CTRL_GP_TESTREG_2,
    SOC_CTRL_GP_TESTREG_3,
    SOC_CTRL_CLUSTER_CTRL,
    SOC_CTRL_JTAGREG,
    SOC_CTRL_CORESTATUS,
    SOC_CTRL_CORESTATUS_READ_ONLY,
    SOC_CTRL_BOOTSEL,
    SOC_CTRL_CLKSEL
  } soc_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SOC_CTRL_PERMIT [14] = '{
    4'b 1111, // index[ 0] SOC_CTRL_INFO
    4'b 1111, // index[ 1] SOC_CTRL_FC_BOOTADDR
    4'b 0001, // index[ 2] SOC_CTRL_FC_FETCH_EN
    4'b 0111, // index[ 3] SOC_CTRL_SOC_INFO
    4'b 1111, // index[ 4] SOC_CTRL_GP_TESTREG_0
    4'b 1111, // index[ 5] SOC_CTRL_GP_TESTREG_1
    4'b 1111, // index[ 6] SOC_CTRL_GP_TESTREG_2
    4'b 1111, // index[ 7] SOC_CTRL_GP_TESTREG_3
    4'b 0001, // index[ 8] SOC_CTRL_CLUSTER_CTRL
    4'b 0011, // index[ 9] SOC_CTRL_JTAGREG
    4'b 1111, // index[10] SOC_CTRL_CORESTATUS
    4'b 1111, // index[11] SOC_CTRL_CORESTATUS_READ_ONLY
    4'b 0001, // index[12] SOC_CTRL_BOOTSEL
    4'b 0001  // index[13] SOC_CTRL_CLKSEL
  };

endpackage

